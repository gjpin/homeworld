# https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/prometheusreceiver
# https://artifacthub.io/packages/helm/opentelemetry-helm/opentelemetry-collector
# https://github.com/open-telemetry/opentelemetry-helm-charts/tree/main/charts/opentelemetry-collector
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: otel-collector-main
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "3"
spec:
  project: default
  destination:
    server: https://kubernetes.default.svc
    namespace: otel-collector
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false
    syncOptions:
    - Validate=true
    - CreateNamespace=true
    - PrunePropagationPolicy=foreground
    - PruneLast=true
  source:
    chart: opentelemetry-collector
    repoURL: https://open-telemetry.github.io/opentelemetry-helm-charts
    targetRevision: 0.129.0
    helm:
      releaseName: otel-collector-main
      valuesObject:
        fullnameOverride: otel-collector-main
        namespaceOverride: otel-collector

        mode: deployment
        
        image:
          repository: docker.io/library/otel/opentelemetry-collector-contrib

        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 250m
            memory: 512Mi

        autoscaling:
          enabled: true
          minReplicas: 1
          maxReplicas: 5
          targetCPUUtilizationPercentage: 80
          targetMemoryUtilizationPercentage: 80

        nodeSelector:
          node-role.kubernetes.io/homelab: homelab

        service:
          enabled: true
          type: ClusterIP

        config:
          receivers:
            jaeger: null
            zipkin: null
            prometheus: # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/prometheusreceiver
              config:
                scrape_configs:
                  - job_name: otel-collector-main
                    scrape_interval: 10s
                    static_configs:
                      - targets:
                          - ${env:MY_POD_IP}:8888
                  - job_name: k8s
                    kubernetes_sd_configs:
                    - role: pod
                    relabel_configs:
                    - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                      regex: "true"
                      action: keep
                    metric_relabel_configs:
                    - source_labels: [__name__]
                      regex: "(request_duration_seconds.*|response_duration_seconds.*)"
                      action: keep
            otlp:
              protocols:
                grpc:
                  endpoint: ${env:MY_POD_IP}:4317
                http:
                  endpoint: ${env:MY_POD_IP}:4318

          processors:
            batch: {}
            memory_limiter:
              check_interval: 5s
              limit_percentage: 80
              spike_limit_percentage: 25

          exporters:
            debug: null
            otlphttp:
              endpoint: 'TODO: clickhouse svc'
              headers:
                authorization: 'TODO: clickhouse api key'
              compression: gzip

          extensions:
            health_check:
              endpoint: ${env:MY_POD_IP}:13133

          service:
            telemetry:
              metrics:
                readers:
                  - pull:
                      exporter:
                        prometheus:
                          host: ${env:MY_POD_IP}
                          port: 8888
            extensions:
              - health_check
            pipelines:
              logs:
                receivers:
                  - otlp
                processors:
                  - memory_limiter
                  - batch
                exporters:
                  - otlphttp
              metrics:
                receivers:
                  - otlp
                  - prometheus
                processors:
                  - memory_limiter
                  - batch
                exporters:
                  - otlphttp
              traces:
                receivers:
                  - otlp
                processors:
                  - memory_limiter
                  - batch
                exporters:
                  - otlphttp
---